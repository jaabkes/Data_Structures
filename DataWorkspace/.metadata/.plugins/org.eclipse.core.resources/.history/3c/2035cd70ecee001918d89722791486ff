package linear;

import static org.junit.Assert.*;
import org.junit.*;
/**
 * Test Cases for SortedLinkedList
 * @author jacobabkes
 *
 */
public class SortedLinkedListTest {

	@Test
	public void testAdd1() {
		SortedLinkedList<Integer> sll = new SortedLinkedList<Integer>(new Integer(2));
		assertEquals(1, sll.size()); 
		
		sll.add(new Integer(3)); //insert at the end
		assertEquals(2, sll.size());
		assertEquals(new Integer(3), sll.get(1));
		
		sll.add(new Integer(2)); //insert between two nodes
		assertEquals(3, sll.size());
		assertEquals(new Integer(2), sll.get(0));
		
		sll.add(new Integer(7)); //insert at the end
		assertEquals(new Integer(7), sll.get(3));
		
		sll.add(new Integer(5)); //insert between two nodes
		assertEquals(5, sll.size());
		assertEquals(new Integer(5), sll.get(3));
		
		sll.add(new Integer(1)); //insert at the beggining 
		assertEquals(new Integer(1), sll.get(0));
	}

	@Test
	public void testRemoveData() {
		SortedLinkedList<Integer> sll = new SortedLinkedList<Integer>(new Integer(2));
		sll.add(new Integer(3));
		sll.add(new Integer(2));
		sll.add(new Integer(7));
		sll.add(new Integer(5));
		sll.add(new Integer(1));

		assertTrue(sll.remove(new Integer(2))); //a node in between two nodes
		assertEquals(new Integer(3), sll.get(2));
		assertEquals(new Integer(2), sll.get(1));
		assertEquals(5, sll.size());
		
		assertTrue(sll.remove(new Integer(1))); //first node removal
		assertEquals(new Integer(2), sll.get(0));
		assertEquals(4, sll.size());
		
		
		assertTrue(sll.remove(new Integer(7))); //end node removal
		assertEquals(new Integer(5), sll.get(2));
		assertEquals(3, sll.size());
	}

	@Test
	public void testRemoveIndex() 
	{
		SortedLinkedList<Integer> sll = new SortedLinkedList<Integer>(new Integer(8));
		sll.add(new Integer(4));
		sll.add(new Integer(2));
		sll.add(new Integer(-3));
		//System.out.println(sll);    //(-3)--> (2)--> (4)--> (8)--> 
		assertEquals(new Integer(-3), sll.remove(0)); //(2)--> (4)--> (8)--> 
		assertEquals(new Integer(2), sll.get(0));
		sll.add(new Integer(-3)); //(-3)--> (2)--> (4)--> (8)--> 
		
		assertEquals(new Integer(4), sll.remove(2)); //(-3)--> (2)--> (8)-->
		assertEquals(new Integer(8), sll.get(2));
		assertEquals(new Integer(2), sll.get(1));
		sll.add(new Integer(4)); //(-3)--> (2)--> (4)--> (8)--> 
		
		assertEquals(new Integer(8), sll.remove(3)); //(-3)--> (2)--> (4)-->
		assertEquals(new Integer(4), sll.get(2));
		assertEquals(new Integer(2), sll.get(1));
		sll.add(new Integer(8)); //(-3)--> (2)--> (4)--> (8)--> 
		
		assertEquals(new Integer(2), sll.remove(1)); //(-3)-->  (4)--> (8)--> 
		assertEquals(new Integer(-3), sll.get(0));
		assertEquals(new Integer(4), sll.get(1));
		/* TESTING REMOVING ALL NODES AND THEN ADDING  */

		sll.removeAll();
		sll.add(new Integer(4));
		assertEquals(1, sll.size());
		assertEquals(new Integer(4), sll.get(0));

	}
	@Test 
	public void iterator()
	{
		SortedLinkedList<Integer> sll = new SortedLinkedList<Integer>(new Integer(4));
		sll.add(new Integer(2));
		for(Integer i : sll) //this right here is the most important feature of any collection tbh
		{
			System.out.println(i);
		}
		
	}
}
